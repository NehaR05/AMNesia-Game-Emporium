from tkinter import *
from tkinter.ttk import *
import csv
import random
import threading
import time

def tt_func():
    import tkinter as tk
    sp.iconify()
    class TypeSpeedGUI:
        def __init__(self):
            self.root = Toplevel(sp)
            self.root.title ("Typing Speed Test")
            self.root.geometry("800x600")
            self.root.configure(bg='light blue')
            
            self.texts = open("texts.txt" , "r").read().split("\n")

            self.frame=tk.Frame(self.root)
                        
            self.sample_label = tk.Label(self.frame, text=random.choice(self.texts), font=("Helvetica", 18))
            self.sample_label.grid(row=0, column=0, columnspan=2, padx=5, pady=10)
            
            self.input_entry = tk.Entry(self.frame, width=40, font=("Helvetica", 24))
            self.input_entry.grid(row=1, column=0, columnspan=2, padx=5, pady=10)
            self.input_entry.bind("<KeyPress>", self.start)
            
            self.speed_label = tk.Label(self.frame, text="Speed: \n0.00 Characters Per Second\n0.00 Characters Per Minute", font=("Helvetica", 18))
            self.speed_label.grid(row=2, column=0, columnspan=2, padx=5, pady=10)

            self.frame.pack(expand=True)
                
            self.counter=0
            self.running=False
            self.root.mainloop()
            
        def start(self, event):
            if not self.running:
                if not event.keycode in [16, 17, 18]:
                    self.running = True
                    t=threading.Thread(target=self.time_thread)
                    t.start()
            if not self.sample_label.cget('text').startswith(self.input_entry.get()):
                self.input_entry.config(fg="red")
            else:
                self.input_entry.config(fg="black")
            if self.input_entry.get() == self.sample_label.cget("text")[:-1]:
                self.running=False
                self.input_entry.config(fg="green")
                self.root.after(8000, lambda: self.root.destroy())
                self.root.after(1000, lambda: sp.deiconify())

        def time_thread(self):
            while self.running:
                time.sleep(0.1)
                self.counter+=0.1
                cps=len(self.input_entry.get()) / self.counter
                cpm=cps*60
                self.speed_label.config(text=f"Speed: \n{cps:.2f} Characters Per Second\n{cpm:.2f} Characters Per Minute")

    TypeSpeedGUI()
